{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"SSJS WSProxy Retrieve Data Extensions List": {
		"prefix": "ssjs-wsproxy-retrieve-de-list",
		"body": [
			"        function retrieveDataExtensions(DEKey) {",
			"            var cols = ['Name', 'CustomerKey', 'CategoryID', 'IsSendable'];",
			"            var filter = {",
			"                Property: 'CustomerKey',",
			"                SimpleOperator: 'equals',",
			"                Value: DEKey",
			"            };",
			"            var result = prox.retrieve('DataExtension', cols, filter);",
			"            return result;",
			"        }"
		],
		"description": "Retrieve Data Extensions List"
	},

	"SSJS WSProxy Retrieve Data Extensions Records": {
		"prefix": "ssjs-wsproxy-retrieve-de-records",
		"body": [
			"function retrieveRecords(DEKey) {",
			"    var DERetrieveConfig = {",
			"        name: DEKey,",
			"        cols: ['SubscriberKey']",
			"    };",
			"",
			"    var records = [],",
			"        moreData = true,",
			"        reqID = (data = null);",
			"",
			"    while (moreData) {",
			"        moreData = false;",
			"",
			"        if (reqID == null) {",
			"            data = prox.retrieve(",
			"                'DataExtensionObject[' + DERetrieveConfig.name + ']',",
			"                DERetrieveConfig.cols",
			"            );",
			"        } else {",
			"            data = prox.getNextBatch('DataExtensionObject[' + DERetrieveConfig.name + ']', reqID);",
			"        }",
			"",
			"        if (data != null) {",
			"            moreData = data.HasMoreRows;",
			"            reqID = data.RequestID;",
			"            for (var i = 0; i < data.Results.length; i++) {",
			"                var result_list = data.Results[i].Properties;",
			"                var obj = {};",
			"                for (k in result_list) {",
			"                    var key = result_list[k].Name;",
			"                    var val = result_list[k].Value;",
			"                    if (key.indexOf('_') != 0) obj[key] = val;",
			"                }",
			"                records.push(obj);",
			"            }",
			"        }",
			"    }",
			"    return records;",
			"}",
			"",
			"function retrieveDataExtensions(DEKey) {",
			"    var cols = ['Name', 'CustomerKey', 'CategoryID', 'IsSendable'];",
			"    var filter = {",
			"        Property: 'CustomerKey',",
			"        SimpleOperator: 'equals',",
			"        Value: DEKey",
			"    };",
			"    var result = prox.retrieve('DataExtension', cols, filter);",
			"    return result;",
			"}",
			""
		],
		"description": "WSProxy Retrieve Data Extensions Records"
	},

	"SSJS Matching records": {
		"prefix": "ssjs-matching-records",
		"body": [
			"function rowsMatched(DE1JSON, DE2JSON, key1, key2) {",
			"    for (var i = 0; i < DE1JSON.length; i++) {",
			"        DE1JSON[i]['FoundRecord'] = 'false';",
			"        for (var j = 0; j < DE2JSON.length; j++) {",
			"            if (DE1JSON[i][key1] === DE2JSON[j][key2]) {",
			"                DE1JSON[i]['FoundRecord'] = 'true';",
			"            }",
			"            break;",
			"        }",
			"    }",
			"    return DE1JSON;",
			"}",
			""
		],
		"description": "SSJS Matching records"
	},
	"SSJS WSProxy Upsert Data Extension Records": {
		"prefix": "ssjs-wsproxy-upsert-de-records",
		"body": [
			"function upsertDE(DEKey, DEAction, DEJSON) {",
			"    var resultArr = [];",
			"    var resultObj = {};",
			"    var updateObject = {",
			"        CustomerKey: DEKey,",
			"        Properties: [",
			"            {",
			"                Name: 'SubscriberKey',",
			"                Value: DEJSON['SubscriberKey']",
			"            }",
			"        ]",
			"    };",
			"",
			"    var options = {",
			"        SaveOptions: [",
			"            {",
			"                PropertyName: '*',",
			"                SaveAction: DEAction //NOTE: UpdateAdd, UpdateOnly",
			"            }",
			"        ]",
			"    };",
			"",
			"    if (DEAction === 'UpdateOnly') {",
			"        var result = prox.updateItem('DataExtensionObject', updateObject, options);",
			"    } else if (DEAction === 'AddOnly') {",
			"        var result = prox.createItem('DataExtensionObject', updateObject);",
			"    }",
			"",
			"    resultObj['Subscriber Key'] = DEJSON['SubscriberKey'];",
			"    if (result.Status === 'Error') {",
			"        resultObj['Record Result'] = result;",
			"    } else {",
			"        resultObj['Record Result'] = result.Status;",
			"    }",
			"",
			"    resultArr.push(resultObj);",
			"    return resultArr;",
			"}",
			""
		],
		"description": "SSJS WSProxy Upsert Data Extension Records"
	},
	"SSJS Platform Add Remove From Suppression List": {
		"prefix": "ssjs-platform-suppression-list",
		"body": [
			"function addRemoveFromSuppressionList(DEKey, DEJSON, mode) {",
			"    var resultObj = {};",
			"    if (mode === 'delete') {",
			"        var result = Platform.Function.DeleteData(",
			"            DEKey,",
			"            ['Email Address'],",
			"            [DEJSON['PersonEmail']]",
			"        );",
			"        resultObj['Email Address'] = DEJSON['PersonEmail'];",
			"        resultObj['Remove Subscriber Result'] = result;",
			"    } else if (mode === 'insert') {",
			"        var result = Platform.Function.InsertData(",
			"            DEKey,",
			"            ['Email Address', 'SubscriberKey', 'PausedUntil'],",
			"            [DEJSON['PersonEmail'], DEJSON['PersonContactId'], DEJSON['PausedUntil']]",
			"        );",
			"        resultObj['Subscriber Key'] = DEJSON['PersonContactId'];",
			"        resultObj['Email Address'] = DEJSON['PersonEmail'];",
			"        resultObj['Insert Subscriber Result'] = result;",
			"    }",
			"    return resultObj;",
			"}",
			""
		],
		"description": "SSJS Platform Add Remove From Suppression List"
	},
	"SSJS Write CloudPage Results": {
		"prefix": "ssjs-write-cloudpage-results",
		"body": [
			"function writeResults(name, result) {",
			"    if (cloudPageDebug === true) {",
			"        Write('<br />');",
			"        Write('<br />');",
			"        Write('<h3>');",
			"        Write(name);",
			"        Write('</h3>');",
			"        Write(Stringify(result));",
			"    }",
			"}"
		],
		"description": "SSJS Write CloudPage Results"
	},
	"SSJS For Loop": {
		"prefix": "ssjs-for-loop",
		"body": ["for (var i = 0; i < $arr.length; i++){", "    ", "}"],
		"description": "SSJS For Loop"
	},
	"SSJS Template": {
		"prefix": "ssjs-template",
		"body": [
			"<script runat=\"server\">",
			"    Platform.Load('core', '1.1.1');",
			"    try {",
			"        var prox = new Script.Util.WSProxy();",
			"",
			"    } catch (e) {",
			"        writeResults('Error', e);",
			"    }",
			"</script>",
			""
		],
		"description": "SSJS Template"
	},
	"SSJS Class Template": {
		"prefix": "ssjs-class-template",
		"body": [
			"function className() {}",
			"className = {",
			"    functionName: function (arr) {",
			"        var resultJSON = [];",
			"        for (var i = 0; i < arr.length; i++) {",
			"            var resultObj = {};",
			"            if (arr[i] === 'Orange') {",
			"                resultObj['Status'] = 'Success';",
			"                resultJSON.push(resultObj);",
			"            }",
			"        }",
			"        return resultJSON;",
			"    }",
			"};",
			"var arr = ['Orange', 'Yellow', 'Green'];",
			"var results = className.functionName(arr);",
			""
		],
		"description": "SSJS Class Template"
	},
	"SSJS Accessing property of a JSON and creating a new Object using the property": {
		"prefix": "ssjs-json-property-access",
		"body": [
			"//NOTE: Accessing property of a JSON and creating a new Object using the property",
			"",
			"var parameters = [",
			"    {",
			"        A: true",
			"    },",
			"    {",
			"        B: false",
			"    },",
			"    {",
			"        C_changed: false",
			"    },",
			"    {",
			"        D_changed: true",
			"    }",
			"];",
			"",
			"var resultsArr = [];",
			"for (var i = 0; i < parameters.length; i++) {",
			"    for (var name in parameters[i]) {",
			"        changedValueObj = {};",
			"        if (name.indexOf('_changed') !== -1) {",
			"            var field = name.replace('_changed', '');",
			"            changedValueObj = {",
			"                Name: field,",
			"                Value: parameters[i][name]",
			"            };",
			"            resultsArr.push(changedValueObj);",
			"        }",
			"    }",
			"}",
			"console.log(resultsArr);",
			"",
			"//RESULTS:",
			"",
			"[",
			"    {",
			"        Name: 'C',",
			"        Value: false",
			"    },",
			"    {",
			"        Name: 'D',",
			"        Value: true",
			"    }",
			"];",
			""
		],
		"description": "SSJS Accessing property of a JSON and creating a new Object using the property"
	},
	"SSJS LogUnsubEvent and Delay": {
		"prefix": "ssjs-logunsubevent",
		"body": [
			"function unsubscribeFunctions() {}",
			"unsubscribeFunctions = {",
			"    //NOTE: LogUnsubEvent() using WSProxy.  This logs the unsubscribe event at the job level for tracking purposes",
			"    logunsubEvent: function (subscriberKey) {",
			"        var props = [",
			"            {",
			"                Name: 'SubscriberKey',",
			"                Value: subscriberKey",
			"            },",
			"            {",
			"                Name: 'JobID',",
			"                Value: Variable.GetValue('@jobID')",
			"            },",
			"            {",
			"                Name: 'ListID',",
			"                Value: Variable.GetValue('@listid')",
			"            },",
			"            {",
			"                Name: 'BatchID',",
			"                Value: Variable.GetValue('@batchID')",
			"            },",
			"            {",
			"                Name: 'Reason',",
			"                Value: 'One click unsubscribe'",
			"            }",
			"        ];",
			"",
			"        var results = prox.execute(props, 'LogUnsubEvent');",
			"        return results;",
			"    },",
			"    delay: function (milliseconds) {",
			"        //NOTE: 3000 = 3 seconds",
			"        var start = new Date().getTime();",
			"        for (var i = 0; i < 1e7; i++) {",
			"            if (new Date().getTime() - start > milliseconds) {",
			"                break;",
			"            }",
			"        }",
			"    }",
			"};",
			""
		],
		"description": "SSJS LogUnsubEvent and Delay"
	},
	"SSJS Update Tracking Consent on Subscriber Object": {
		"prefix": "ssjs-tracking-consent",
		"body": [
			"function email_updateTrackingConsent(subscriberKey, TrackOpensClicks_OptinFlag) {",
			"    //NOTE: Updates Tracking Preference on Subscriber Object.",
			"    var updateSubscriber = {",
			"        SubscriberKey: subscriberKey,",
			"        Attributes: {",
			"            DoNotTrack: !TrackOpensClicks_OptinFlag //NOTE: Inverted because optin on form means FALSE in Subscriber Attribute",
			"        }",
			"    };",
			"    var subObj = Subscriber.Init(subscriberKey);",
			"    var status = subObj.Upsert(updateSubscriber);",
			"    return status;",
			"}",
			""
		],
		"description": "SSJS Update Tracking Consent on Subscriber Object"
	},
	"SSJS For Key In": {
		"prefix": "ssjs-for-key-in",
		"body": [
			"//NOTE: Checks tracking consent on subscriber Object",
			"var subObj = Subscriber.Init(subscriberKey);",
			"var attributes = subObj.Attributes.Retrieve(); //[{\"Name\":\"Data Source\",\"Value\":\"UNKNOWN\"},{\"Name\":\"DoNotTrack\",\"Value\":\"True\"}]",
			"",
			"for (var x in attributes) {",
			"    if (attributes[x].Name === 'DoNotTrack') {",
			"        if (attributes[x].Value === 'False') {",
			"            var trackingConsentOnLoad = 'true';",
			"        } else {",
			"            var trackingConsentOnLoad = 'false';",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "SSJS For Key In"
	},
	"SSJS Debug": {
		"prefix": "ssjs-debug",
		"body": [
			"Variable.SetValue(\"debugvar1\", Stringify(var));",
			"",
			"<script runat=\"client\">",
			"console.log(`SSJS Var1: %%=v(@debugvar1)=%%`);",
			"</script>",
			""
		],
		"description": "SSJS Debug"
	},
	"FSJS Channel Toggle": {
		"prefix": "fsjs-channel-toggle",
		"body": [
			"//NOTE: Checks all the inputs with the class .subscription and toggled the channel checkbox if all subscriptions are ticked or not",
			"function emailchannelCheck(preferenceNumber) {",
			"    var j = 0",
			"    $('.subscription').each(function(i, obj) {",
			"        if ($(this).attr('checked') === \"checked\") {",
			"            j++",
			"        }",
			"    })",
			"    if (j > 0) {",
			"        $('#emailchannel').prop('checked', true)",
			"    } else {",
			"        $('#emailchannel').prop('checked', false)",
			"    }",
			"};",
			"",
			"emailchannelCheck($('.subscription').length)"
		],
		"description": "FSJS Channel Toggle"
	},
	"FSJS Subscriptions Toggle From Channel": {
		"prefix": "fsjs-subscriptions-toggle-from-channel",
		"body": [
			"//NOTE: Toggles all subscription checkboxes if the email channel checkbox is toggled. Also toggles preference_updated class",
			"$('#emailchannel').click(function () {",
			"    if ($('#emailchannel').prop('checked') === true) {",
			"        $('.subscription').each(function (i, obj) {",
			"            if ($(this).prop('checked') === false) {",
			"                $(this).prop('checked', true);",
			"                $(this).toggleClass('preference_updated');",
			"            }",
			"        });",
			"    } else if ($('#emailchannel').prop('checked') === false) {",
			"        $('.subscription').each(function (i, obj) {",
			"            if ($(this).prop('checked') === true) {",
			"                $(this).prop('checked', false);",
			"                $(this).toggleClass('preference_updated');",
			"            }",
			"        });",
			"    }",
			"});",
			""
		],
		"description": "FSJS Subscriptions Toggle From Channel"
	},
	"FSJS Channel Toggle Check": {
		"prefix": "fsjs-channel-toggle-check",
		"body": [
			"//NOTE: Toggles channel if the expected amount of subscriptions are toggled",
			"$('.subscription').click(",
			"    function() {",
			"        var checked = document.querySelectorAll('input.subscription:checked');",
			"        /* beautify preserve:start */",
			"              var fs_subscriptionsAmount = <ctrl:var name = subscriptionsAmount />",
			"              if (checked.length > 0) {",
			"                  $('#emailchannel').prop('checked',true)",
			"              }else {",
			"                  $('#emailchannel').prop('checked', false)",
			"              }",
			"              /* beautify preserve:end */",
			"    });",
			""
		],
		"description": "FSJS Channel Toggle Check"
	},
	"FSJS Phone Number Validator": {
		"prefix": "fsjs-phone-number-validator",
		"body": [
			"$(function () {",
			"    //NOTE: Creating the REGEX form validator for checking on submission",
			"    $.validator.addMethod(",
			"        'regex',",
			"        function (value, element, regexpr) {",
			"            return regexpr.test(value);",
			"        },",
			"        'Please enter a valid phone number.'",
			"    );",
			"    $('#form').validate({",
			"        rules: {",
			"            mobile_number: {",
			"                required: true,",
			"                regex: /^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$/",
			"            }",
			"        }",
			"    });",
			"});",
			""
		],
		"description": "FSJS Phone Number Validator"
	},
	"SSJS Phone Number Data Hygiene": {
		"prefix": "ssjs-phone-number-data-hygieve",
		"body": [
			"//NOTE: Data input hygiene for entry into MobileConnect ready DE. Input is expected either +234 or 0 in form",
			"parameters.mobile_number = parameters.mobile_number.replace(/^\\+/, ''); //NOTE: Remove leading +",
			"if (globalVars.countryCode === 'NG') {",
			"    parameters.mobile_number = parameters.mobile_number.replace(/^234+/, '0'); //NOTE: Replace leading 234 with 0",
			"    parameters.mobile_number = parameters.mobile_number.replace(/^0+/, ''); //NOTE: Remove leading 0",
			"    parameters.mobile_number = '234' + parameters.mobile_number; //NOTE: Field must be in this format: 234705555555 (no +, countrycode, no leading 0)",
			"}",
			""
		],
		"description": "SSJS Phone Number Data Hygiene"
	},
	"SSJS Update SFObject": {
		"prefix": "ssjs-update-sfobject",
		"body": [
		  "function updateSFObj(recordType, subscriberKey, parameters) {",
		  "    var SFIDPattern = new RegExp('^[a-zA-Z0-9]{18}');",
		  "",
		  "    if (SFIDPattern.test(subscriberKey) == true) {",
		  "        var fields = [];",
		  "        if (recordType === 'Candidate') {",
		  "            if (parameters.candidate_advice_and_tips_subscription_changed === true) {",
		  "                fields.push('EmailPreferences_AdviceTips__c');",
		  "                fields.push(parameters.candidate_advice_and_tips);",
		  "            }",
		  "        }",
		  "",
		  "        //NOTE: ALWAYS UPDATE TO FALSE IN CRM",
		  "        fields.push('HasOptedOutOfEmail');",
		  "        fields.push('false');",
		  "",
		  "        //NOTE: Contact or Lead",
		  "        var sfObj = subscriberKey.substring(0, 3) == '003' ? 'Contact' : 'Lead';",
		  "",
		  "        var updateSFObject = '';",
		  "        updateSFObject += '\\%\\%[ ';",
		  "        updateSFObject +=",
		  "            \"set @SFUpdateResults = UpdateSingleSalesforceObject('\" + sfObj + \"',\";",
		  "        updateSFObject += \"'\" + subscriberKey + \"','\" + fields.join(\"','\") + \"'\";",
		  "        updateSFObject += ') ';",
		  "        updateSFObject += 'output(concat(@SFUpdateResults)) ';",
		  "        updateSFObject += ']\\%\\%';",
		  "",
		  "        try {",
		  "            updateSFObjectResults = Platform.Function.TreatAsContent(updateSFObject);",
		  "        } catch (err) {",
		  "            updateSFObjectResults = 0;",
		  "            return err;",
		  "        }",
		  "",
		  "        return parseInt(updateSFObjectResults);",
		  "    }",
		  "}",
		  ""
		],
		"description": "SSJS Update SFObject"
	  }
}
